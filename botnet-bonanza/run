#!/opt/pwn.college/python
import ctypes
import os
import shutil

import yaml

import sys
sys.path.append("/challenge/dojjail")

from dojjail import BusyBoxFSHost, Network, Host


def setuid_magic():
    PR_SET_DUMPABLE = 4

    libc = ctypes.CDLL("libc.so.6")

    euid = os.geteuid()
    os.setuid(euid)
    os.setgid(euid)
    libc.prctl(PR_SET_DUMPABLE, True)


class Launcher():
    compose_file = None
    hosts = []
    network = None

    networks = {}

    def __init__(self, filename):
        with open(filename, 'r') as f:
            self.compose_file = yaml.safe_load(f)

    def _get_host(self, name):
        for host in self.hosts:
            if host.name == name:
                return host
        assert False, f"Hostname {name} not found!"

    def launch(self):
        assert self.compose_file is not None, "compose_file is not set!"

        host_names = self.compose_file['services'].keys()
        network_names = self.compose_file['networks'].keys()

        self.network = Network("router")
        
        for network_name in network_names:
            self.networks[network_name] = []

        for hostname in host_names:
            self.hosts.append(BusyBoxFSHost(hostname, src_path=f"/challenge/{hostname}"))
            for net_name in self.compose_file['services'][hostname]['networks']:
                self.networks[net_name].append(hostname)

        self.hosts.append(Host('hacker_host'))
        #self._get_host('flag_host').copy_file('/flag', '/flag')

        for host_names in self.networks.values():
            for h in host_names:
                for i in host_names:
                    if h != i:
                        self.network.connect(self._get_host(h), self._get_host(i))

        self.network.connect(self._get_host('hacker_host'), self._get_host('h1'))
        # Launch challenges in each host
        self.network.run()
        for host in self.hosts:
            if host.name != 'hacker_host':
                challenge = " ".join(self.compose_file['services'][host.name]['entrypoint'])
                host.exec_shell(challenge, wait=False)

        self._get_host("hacker_host").interact()

        self.cleanup()

    def cleanup(self):
        # TODO: This will break something
        for host in self.hosts:
            print(f"killing {host._pid.value + 1}")
            os.kill(host.pid + 1, 9)
            print(f"killing {host._pid.value}")
            os.kill(host.pid, 9)

if __name__ == '__main__':
    setuid_magic()
    l = Launcher("/challenge/docker-compose.yml")
    l.launch()
